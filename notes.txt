How to compare two UCs in a calendar view?
How to allow for modular date ranges in a calendar view?
How to accommodate the larger scale of the data?


To-do:
	Features:
		1) Implement several views, for respective time frames	
			a) Dashboard View
				- Shows purely graphs and analytics for any number of Urgent Cares
					- Traffic by Month
					- Providers by Month
					- Overlapping of past data
					- Filterable by Urgent Care
				- Shows data over a selectable time frame
				- Gives a textual report of the year [STRETCH]
			b) Calendar View (Month?) [DEFAULT]
				- Shows a calendar view for a month for a specific Urgent Care
					- Show a changeable number of days before and after?
				- Able to overlay (or display beneath) multiple years for comparison [STRETCH]
				- Icons below each date representing information
					- Doctor icon representing understaffed
					- People representing high traffic
					- Etc.
				- Hovering over a date brings up the details about each icon				
				- i.e., "Alpine UC is expected to experience a high patient volume"
					- Add reason: e.g., "due to _____" [STRETCH]
				- Clicking a date brings up one of two things:
					- Graphs for that date
					- A daily view of that date
						- Shows hours in a specific day, with info
						- Shows one of two things:
							- Event listings and blocks of time in which there are expected ____
							- Strictly graphs and charts
		2) Sidebar preferences/settings
			a) API Selection
			b) Filters
				- Cutoffs for marking bad values, etc.
			c) Model	
				- Altering variables in the model
			d) Theme
		3) Request caching
		4) Refactoring
		5) Live updating of graphs and information




// var dataPoint = {};
// for (var property in element) {
// 	if (property != "_id" && property != "Department") { dataPoint[property] = element[property]; }
// }



// Watcher methods?

// $scope.$watch(function(){
//     return DateRange.getStartDate();
// }, function (newValue) {
//     alert("isLoggedIn changed to " + newValue);
// });




// // If we recieved an array (sorted)
// if (Array.isArray(this.rawAPIData) && this.rawAPIData[0]) {

//     // Keeps track of the number of days, hours, months...
//     var previous = this.rawAPIData[0][denominator];         // Start number (to determine if a new day, month, etc. has been selected)
//     var count = 0;                                          // Count of the number of days, months, etc.
//     var multiplier = determineMultiplier(denominator);

//     // Iterate and add appropriately
//     this.rawAPIData.forEach(function(sortedPoint) {

//         // Append to the appropriate department
//         switch (sortedPoint.Department) {
//             case "Spectrum Health Alpine Urgent Care": 
//                 if (sortedPoint[denominator] < previous) { count++; appendEmptyPoints(parsedData["Alpine"].values, previous, (sortedPoint[denominator] + count*multiplier));  }
//                 var d = (sortedPoint[denominator] + count * multiplier);
//                 parsedData["Alpine"].values.push({x: d, y: sortedPoint[numerator]});
//                 previous = sortedPoint[denominator];
//                 break;
//             default:
//                 break;
//         }            
//     });
// }



// Angular UI Bootstrap Datepicker & Timepicker

<!--                     <div class="input-group">
                        <input type="date" class="form-control" uib-datepicker-popup ng-model="startDate" is-open="status.opened" min-date="minDate" max-date="maxDate" datepicker-options="dateOptions" date-disabled="disabled(date, mode)" ng-required="true" close-text="Close" ng-change="setStartDate(startDate)" />
                        <span class="input-group-btn">
                            <button type="button" class="btn btn-default" ng-click="open($event)"><i class="glyphicon glyphicon-calendar"></i></button>
                        </span>
                        <uib-timepicker ng-model="startDate" hour-step="hstep" minute-step="mstep" show-meridian="ismeridian" ng-change="setStartDate(startDate)"></uib-timepicker>
                    </div> -->